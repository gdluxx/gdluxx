name: Release and Build

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
    workflow_dispatch:

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    release:
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        runs-on: ubuntu-latest
        permissions:
            contents: write
            issues: write
            pull-requests: write
            id-token: write
        outputs:
            new-release-published: ${{ steps.semantic-release.outputs.new-release-published }}
            new-release-version: ${{ steps.semantic-release.outputs.new-release-version }}
            new-release-git-tag: ${{ steps.semantic-release.outputs.new-release-git-tag }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: latest

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run semantic-release
              id: semantic-release
              run: npx semantic-release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    build-and-push:
        runs-on: ubuntu-latest
        needs: [release]
        if: needs.release.outputs.new-release-published == 'true'
        permissions:
            contents: read
            packages: write
            id-token: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Container Registry
              if: github.event_name != 'pull_request'
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=raw,value=latest,enable={{is_default_branch}}
                      type=raw,value={{tag}},enable=${{ needs.release.outputs.new-release-published == 'true' }},pattern={{tag}}
                      type=raw,value=${{ needs.release.outputs.new-release-version }},enable=${{ needs.release.outputs.new-release-published == 'true' }}
                      type=raw,value=${{ needs.release.outputs.new-release-git-tag }},enable=${{ needs.release.outputs.new-release-published == 'true' }}
                  labels: |
                      org.opencontainers.image.title=gdluxx
                      org.opencontainers.image.description=SvelteKit-based GUI frontend for gallery-dl
                      org.opencontainers.image.vendor=${{ github.repository_owner }}
                      org.opencontainers.image.licenses=GPL-2.0
                      org.opencontainers.image.version=${{ needs.release.outputs.new-release-version || 'dev' }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  platforms: linux/amd64,linux/arm64
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  build-args: |
                      BUILDKIT_INLINE_CACHE=1
