name: Release Extension

on:
  workflow_dispatch:
  push:
    paths:
        - 'extension/**'
    tags:
        - 'extension-v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_GH_TOKEN }}

      - name: Setup
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: |
            - args: [--frozen-lockfile]
            - args: [--frozen-lockfile]
              cwd: extension

      - name: Run build checks
        working-directory: ./extension
        run: |
          pnpm compile
          pnpm lint

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Setup Git
        run: |
          git config user.name "gdluxx-bot"
          git config user.email "218500807+gdluxx-bot@users.noreply.github.com"

      - name: Determine release type
        id: release-type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.release-type }}" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Run release-it
        working-directory: ./extension
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_GH_TOKEN }}
        run: pnpm release-it ${{ steps.release-type.outputs.type }} --ci

      - name: Get release version
        id: release-version
        run: echo "version=$(node -p "require('./extension/package.json').version")" >> $GITHUB_OUTPUT

      - name: Build Chrome extension
        working-directory: ./extension
        run: pnpm build:chrome

      - name: Build Firefox extension
        working-directory: ./extension
        run: pnpm build:firefox

      - name: Create Chrome zip
        working-directory: ./extension
        run: pnpm zip:chrome

      - name: Create Firefox zip
        working-directory: ./extension
        run: pnpm zip:firefox

      - name: Upload to stores
        working-directory: ./extension
        env:
          CHROME_EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
          CHROME_CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
          CHROME_CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
          CHROME_REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
          FIREFOX_EXTENSION_ID: ${{ secrets.FIREFOX_EXTENSION_ID }}
          FIREFOX_JWT_ISSUER: ${{ secrets.FIREFOX_JWT_ISSUER }}
          FIREFOX_JWT_SECRET: ${{ secrets.FIREFOX_JWT_SECRET }}
        run: |
          pnpm wxt submit \
            --chrome-zip .output/gdluxx-extension-${{ steps.release-version.outputs.version }}-chrome.zip \
            --firefox-zip .output/gdluxx-extension-${{ steps.release-version.outputs.version }}-firefox.zip

      - name: Upload Chrome zip to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: extension-v${{ steps.release-version.outputs.version }}
          files: extension/.output/gdluxx-extension-${{ steps.release-version.outputs.version }}-chrome.zip
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_GH_TOKEN }}

      - name: Upload Firefox zip to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: extension-v${{ steps.release-version.outputs.version }}
          files: extension/.output/gdluxx-extension-${{ steps.release-version.outputs.version }}-firefox.zip
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_GH_TOKEN }}